// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const allCategories = `-- name: AllCategories :many
SELECT
  "name",
  "color"
FROM
  categories
`

type AllCategoriesRow struct {
	Name  string `json:"name"`
	Color int32  `json:"color"`
}

func (q *Queries) AllCategories(ctx context.Context) ([]AllCategoriesRow, error) {
	rows, err := q.db.Query(ctx, allCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AllCategoriesRow
	for rows.Next() {
		var i AllCategoriesRow
		if err := rows.Scan(&i.Name, &i.Color); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createUser = `-- name: CreateUser :exec
INSERT INTO
  users ("login", "password", "user_role_id")
VALUES
  ($1, $2, 1)
`

type CreateUserParams struct {
	Login    string `json:"login"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser, arg.Login, arg.Password)
	return err
}

const enrollIntoCourse = `-- name: EnrollIntoCourse :exec
INSERT INTO
  enrollments (course_id, user_id, enrolled_on)
VALUES
  (
    (
      SELECT
        id
      FROM
        courses
      WHERE
        title = $1
      LIMIT
        1
    ),
    $2,
    NOW()
  )
`

type EnrollIntoCourseParams struct {
	Title  string `json:"title"`
	UserID int64  `json:"user_id"`
}

func (q *Queries) EnrollIntoCourse(ctx context.Context, arg EnrollIntoCourseParams) error {
	_, err := q.db.Exec(ctx, enrollIntoCourse, arg.Title, arg.UserID)
	return err
}

const getCategoryCourses = `-- name: GetCategoryCourses :many
SELECT
  DISTINCTs (courses.title)
FROM
  courses
  INNER JOIN course_categories cc ON courses.id = cc.course_id
  INNER JOIN categories ON cc.category_id = categories.id
WHERE
  categories.name = $1
`

func (q *Queries) GetCategoryCourses(ctx context.Context, name string) ([]interface{}, error) {
	rows, err := q.db.Query(ctx, getCategoryCourses, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []interface{}
	for rows.Next() {
		var distincts interface{}
		if err := rows.Scan(&distincts); err != nil {
			return nil, err
		}
		items = append(items, distincts)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClaimsByLogin = `-- name: GetClaimsByLogin :one
SELECT
  users.id,
  user_roles.title
FROM
  users
  LEFT JOIN user_roles ON user_roles.id = users.user_role_id
WHERE
  users.login = $1
`

type GetClaimsByLoginRow struct {
	ID    int64       `json:"id"`
	Title pgtype.Text `json:"title"`
}

func (q *Queries) GetClaimsByLogin(ctx context.Context, login string) (GetClaimsByLoginRow, error) {
	row := q.db.QueryRow(ctx, getClaimsByLogin, login)
	var i GetClaimsByLoginRow
	err := row.Scan(&i.ID, &i.Title)
	return i, err
}

const getCourseDetails = `-- name: GetCourseDetails :one
SELECT
  c.description,c.id
FROM
  courses c where c.id = $1
`

type GetCourseDetailsRow struct {
	Description string `json:"description"`
	ID          int64  `json:"id"`
}

func (q *Queries) GetCourseDetails(ctx context.Context, id int64) (GetCourseDetailsRow, error) {
	row := q.db.QueryRow(ctx, getCourseDetails, id)
	var i GetCourseDetailsRow
	err := row.Scan(&i.Description, &i.ID)
	return i, err
}

const getCourseEnrolledAmount = `-- name: GetCourseEnrolledAmount :one
select count(id) from enrollments where enrollments.course_id = $1
`

func (q *Queries) GetCourseEnrolledAmount(ctx context.Context, courseID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCourseEnrolledAmount, courseID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCourseId = `-- name: GetCourseId :one
select id from courses where title = $1 limit 1
`

func (q *Queries) GetCourseId(ctx context.Context, title string) (int64, error) {
	row := q.db.QueryRow(ctx, getCourseId, title)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getCourseModules = `-- name: GetCourseModules :many
SELECT
  modules.title
FROM
  modules
  INNER JOIN courses ON courses.id = modules.course_id
WHERE
  courses.title = $1
`

func (q *Queries) GetCourseModules(ctx context.Context, title string) ([]string, error) {
	rows, err := q.db.Query(ctx, getCourseModules, title)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var title string
		if err := rows.Scan(&title); err != nil {
			return nil, err
		}
		items = append(items, title)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCourseTeachers = `-- name: GetCourseTeachers :many
SELECT
  u.firstname,u.surname
FROM
  courses
  INNER JOIN course_teachers ct ON ct.course_id = courses.id 
  inner join users u on u.id = ct.user_id
  where ct.course_id = $1
`

type GetCourseTeachersRow struct {
	Firstname pgtype.Text `json:"firstname"`
	Surname   pgtype.Text `json:"surname"`
}

func (q *Queries) GetCourseTeachers(ctx context.Context, courseID int64) ([]GetCourseTeachersRow, error) {
	rows, err := q.db.Query(ctx, getCourseTeachers, courseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCourseTeachersRow
	for rows.Next() {
		var i GetCourseTeachersRow
		if err := rows.Scan(&i.Firstname, &i.Surname); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCourses = `-- name: GetCourses :many
SELECT
  courses.title,
  users.firstname AS organization_name
FROM
  courses
  LEFT JOIN users ON users.id = courses.course_provider
WHERE
  users.id = courses.course_provider
`

type GetCoursesRow struct {
	Title            string      `json:"title"`
	OrganizationName pgtype.Text `json:"organization_name"`
}

func (q *Queries) GetCourses(ctx context.Context) ([]GetCoursesRow, error) {
	rows, err := q.db.Query(ctx, getCourses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCoursesRow
	for rows.Next() {
		var i GetCoursesRow
		if err := rows.Scan(&i.Title, &i.OrganizationName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMyCourses = `-- name: GetMyCourses :many
SELECT
  courses.title,
  users.firstname AS organization_name
FROM
  courses
  LEFT JOIN users ON users.id = courses.course_provider
WHERE
  users.id = courses.course_provider
  AND courses.id IN (
    SELECT
      courses.id
    FROM
      courses
      INNER JOIN enrollments ON enrollments.course_id = courses.id
    WHERE
      enrollments.user_id = $1
  )
`

type GetMyCoursesRow struct {
	Title            string      `json:"title"`
	OrganizationName pgtype.Text `json:"organization_name"`
}

func (q *Queries) GetMyCourses(ctx context.Context, userID int64) ([]GetMyCoursesRow, error) {
	rows, err := q.db.Query(ctx, getMyCourses, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMyCoursesRow
	for rows.Next() {
		var i GetMyCoursesRow
		if err := rows.Scan(&i.Title, &i.OrganizationName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPasswordByLogin = `-- name: GetPasswordByLogin :one
SELECT
  PASSWORD
FROM
  users
WHERE
  login = $1
`

func (q *Queries) GetPasswordByLogin(ctx context.Context, login string) (string, error) {
	row := q.db.QueryRow(ctx, getPasswordByLogin, login)
	var password string
	err := row.Scan(&password)
	return password, err
}
