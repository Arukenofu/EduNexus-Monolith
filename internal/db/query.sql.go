// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const allCategories = `-- name: AllCategories :many
SELECT
  "name",
  "color"
FROM
  categories
`

type AllCategoriesRow struct {
	Name  string `json:"name"`
	Color int32  `json:"color"`
}

func (q *Queries) AllCategories(ctx context.Context) ([]AllCategoriesRow, error) {
	rows, err := q.db.Query(ctx, allCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AllCategoriesRow
	for rows.Next() {
		var i AllCategoriesRow
		if err := rows.Scan(&i.Name, &i.Color); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createUser = `-- name: CreateUser :exec
INSERT INTO
  users ("login", "password", "user_role_id")
VALUES
  ($1, $2, 1)
`

type CreateUserParams struct {
	Login    string `json:"login"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser, arg.Login, arg.Password)
	return err
}

const getCategoryCourses = `-- name: GetCategoryCourses :many
SELECT DISTINCT
  (courses.title)
FROM
  courses
  INNER JOIN course_categories cc ON courses.id = cc.course_id
  INNER JOIN categories ON cc.category_id = categories.id
WHERE
  categories.name = $1
`

func (q *Queries) GetCategoryCourses(ctx context.Context, name string) ([]string, error) {
	rows, err := q.db.Query(ctx, getCategoryCourses, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var title string
		if err := rows.Scan(&title); err != nil {
			return nil, err
		}
		items = append(items, title)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClaimsByLogin = `-- name: GetClaimsByLogin :one
SELECT
  users.id,
  user_roles.title
FROM
  users
  LEFT JOIN user_roles ON user_roles.id = user_role.id
WHERE
  users.login = $1
`

type GetClaimsByLoginRow struct {
	ID    int64       `json:"id"`
	Title pgtype.Text `json:"title"`
}

func (q *Queries) GetClaimsByLogin(ctx context.Context, login string) (GetClaimsByLoginRow, error) {
	row := q.db.QueryRow(ctx, getClaimsByLogin, login)
	var i GetClaimsByLoginRow
	err := row.Scan(&i.ID, &i.Title)
	return i, err
}

const getMyCourses = `-- name: GetMyCourses :many
SELECT
  courses.title
FROM
  enrollments
  INNER JOIN courses ON enrollments.course_id = courses.id
WHERE
  enrollments.user_id = $1
`

func (q *Queries) GetMyCourses(ctx context.Context, userID int64) ([]string, error) {
	rows, err := q.db.Query(ctx, getMyCourses, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var title string
		if err := rows.Scan(&title); err != nil {
			return nil, err
		}
		items = append(items, title)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPasswordByLogin = `-- name: GetPasswordByLogin :one
SELECT
  PASSWORD
FROM
  users
WHERE
  login = $1
`

func (q *Queries) GetPasswordByLogin(ctx context.Context, login string) (string, error) {
	row := q.db.QueryRow(ctx, getPasswordByLogin, login)
	var password string
	err := row.Scan(&password)
	return password, err
}
